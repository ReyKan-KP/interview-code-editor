{
  "sessionId": "24cb44fe-50bf-40b7-9cfb-5ad1a6ef05cd",
  "startTime": "2025-05-08T09:14:40.790Z",
  "user_submissions": {
    "10": {
      "question_id": "10",
      "question_description": "Implement a solution for the 'Merge Intervals' problem: Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:20:13.720Z",
      "initial_templates": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "starter": "/** * @param {number[][]} intervals * @return {number[][]} */function merge(intervals) {  // Your solution here  }// Test casesconsole.log(merge([[1,3],[2,6],[8,10],[15,18]])); // [[1,6],[8,10],[15,18]]console.log(merge([[1,4],[4,5]])); // [[1,5]]"
        },
        {
          "language": "java",
          "label": "Java",
          "starter": "import java.util.*;class Solution {    public int[][] merge(int[][] intervals) {        // Your solution here            }        public static void main(String[] args) {        Solution solution = new Solution();                // Test cases        int[][] result1 = solution.merge(new int[][]{{1,3},{2,6},{8,10},{15,18}});        printResult(result1); // [[1,6],[8,10],[15,18]]                int[][] result2 = solution.merge(new int[][]{{1,4},{4,5}});        printResult(result2); // [[1,5]]    }        private static void printResult(int[][] result) {        System.out.print(\"[\");        for (int i = 0; i < result.length; i++) {            System.out.print(\"[\" + result[i][0] + \",\" + result[i][1] + \"]\");            if (i < result.length - 1) {                System.out.print(\",\");            }        }        System.out.println(\"]\");    }}"
        }
      ],
      "user_code_submission": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "user_code": "/** * @param {number[][]} intervals * @return {number[][]} */function merge(intervals) {  // Your solution here  sadsad  }// Test casesconsole.log(merge([[1,3],[2,6],[8,10],[15,18]])); // [[1,6],[8,10],[15,18]]console.log(merge([[1,4],[4,5]])); // [[1,5]]"
        },
        {
          "language": "java",
          "label": "Java",
          "user_code": "import java.util.*;class Solution {    public int[][] merge(int[][] intervals) {        // Your solution here            }        public static void main(String[] args) {        Solution solution = new Solution();                // Test cases        int[][] result1 = solution.merge(new int[][]{{1,3},{2,6},{8,10},{15,18}});        printResult(result1); // [[1,6],[8,10],[15,18]]                int[][] result2 = solution.merge(new int[][]{{1,4},{4,5}});        printResult(result2); // [[1,5]]    }        private static void printResult(int[][] result) {        System.out.print(\"[\");        for (int i = 0; i < result.length; i++) {            System.out.print(\"[\" + result[i][0] + \",\" + result[i][1] + \"]\");            if (i < result.length - 1) {                System.out.print(\",\");            }        }        System.out.println(\"]\");    }}"
        }
      ]
    },
    "01": {
      "question_id": "01",
      "question_description": "Write a Java program to find the factorial of a number.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:14:51.338Z",
      "initial_templates": {
        "language": "java",
        "label": "Java",
        "starter": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here to find factorial\n    int number = 5;\n    \n    \n  }\n}"
      },
      "user_code_submission": {
        "language": "java",
        "label": "Java",
        "user_code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here to find factorial\n    int number = 5;\n    return 120;\n    \n  }\n}"
      }
    },
    "02": {
      "question_id": "02",
      "question_description": "Explain how .py and .pyc files are different",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:15:14.379Z",
      "initial_templates": {
        "language": "python",
        "label": "Python",
        "starter": "# Write a short Python code example to demonstrate\n# the difference between .py and .pyc files\n\n"
      },
      "user_code_submission": {
        "language": "python",
        "label": "Python",
        "user_code": "# Write a short Python code example to demonstrate\n# the difference between .py and .pyc files\nprint(hello)\n"
      }
    },
    "08": {
      "question_id": "08",
      "question_description": "Implement a solution for the 'Valid Parentheses' problem: Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets, and open brackets are closed in the correct order.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:15:34.464Z",
      "initial_templates": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "starter": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  // Your solution here\n  \n}\n\n// Test cases\nconsole.log(isValid(\"()\")); // true\nconsole.log(isValid(\"()[]{}\")); // true\nconsole.log(isValid(\"(]\")); // false\nconsole.log(isValid(\"([)]\")); // false\nconsole.log(isValid(\"{[]}\")); // true\n"
        },
        {
          "language": "python",
          "label": "Python",
          "starter": "def is_valid(s):\n    # Your solution here\n    pass\n\n# Test cases\nprint(is_valid(\"()\"))        # True\nprint(is_valid(\"()[]{}\"))    # True\nprint(is_valid(\"(]\"))        # False\nprint(is_valid(\"([)]\"))      # False\nprint(is_valid(\"{[]}\"))      # True\n"
        }
      ],
      "user_code_submission": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "user_code": "/**\n * @param {string} s\n * @return {boolean}\n */\nfunction isValid(s) {\n  // Your solution here\n  fsdf\n}\n\n// Test cases\nconsole.log(isValid(\"()\")); // true\nconsole.log(isValid(\"()[]{}\")); // true\nconsole.log(isValid(\"(]\")); // false\nconsole.log(isValid(\"([)]\")); // false\nconsole.log(isValid(\"{[]}\")); // true\n"
        },
        {
          "language": "python",
          "label": "Python",
          "user_code": "def is_valid(s):\n    # Your solution here\n    sfsfdd\n    pass\n\n# Test cases\nprint(is_valid(\"()\"))        # True\nprint(is_valid(\"()[]{}\"))    # True\nprint(is_valid(\"(]\"))        # False\nprint(is_valid(\"([)]\"))      # False\nprint(is_valid(\"{[]}\"))      # True\n"
        }
      ]
    },
    "09": {
      "question_id": "09",
      "question_description": "Implement a solution for finding the maximum subarray sum (Kadane's Algorithm): Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:19:19.774Z",
      "initial_templates": [
        {
          "language": "java",
          "label": "Java",
          "starter": "class Solution {||    public int maxSubArray(int[] nums) {||        // Your solution here||        ||    }||    ||    public static void main(String[] args) {||        Solution solution = new Solution();||        ||        // Test cases||        System.out.println(solution.maxSubArray(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4})); // 6||        System.out.println(solution.maxSubArray(new int[]{1})); // 1||        System.out.println(solution.maxSubArray(new int[]{5, 4, -1, 7, 8})); // 23||    }||}||"
        },
        {
          "language": "cpp",
          "label": "C++",
          "starter": "#include <iostream>||#include <vector>||#include <climits>||using namespace std;||||class Solution {||public:||    int maxSubArray(vector<int>& nums) {||        // Your solution here||        ||    }||};||||int main() {||    Solution solution;||    ||    // Test cases||    vector<int> nums1 = {-2, 1, -3, 4, -1, 2, 1, -5, 4};||    cout << solution.maxSubArray(nums1) << endl; // 6||    ||    vector<int> nums2 = {1};||    cout << solution.maxSubArray(nums2) << endl; // 1||    ||    vector<int> nums3 = {5, 4, -1, 7, 8};||    cout << solution.maxSubArray(nums3) << endl; // 23||    ||    return 0;||}||"
        },
        {
          "language": "python",
          "label": "Python",
          "starter": "def max_sub_array(nums):||    # Your solution here||    pass||||# Test cases||print(max_sub_array([-2, 1, -3, 4, -1, 2, 1, -5, 4]))  # 6||print(max_sub_array([1]))  # 1||print(max_sub_array([5, 4, -1, 7, 8]))  # 23||"
        }
      ],
      "user_code_submission": [
        {
          "language": "java",
          "label": "Java",
          "user_code": "class Solution {||    public int maxSubArray(int[] nums) {||        // Your solution here||        sdfs||    }||    ||    public static void main(String[] args) {||        Solution solution = new Solution();||        ||        // Test cases||        System.out.println(solution.maxSubArray(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4})); // 6||        System.out.println(solution.maxSubArray(new int[]{1})); // 1||        System.out.println(solution.maxSubArray(new int[]{5, 4, -1, 7, 8})); // 23||    }||}||"
        },
        {
          "language": "cpp",
          "label": "C++",
          "user_code": "#include <iostream>||#include <vector>||#include <climits>||using namespace std;||||class Solution {||public:||    int maxSubArray(vector<int>& nums) {||        // Your solution here||        dgfdsf||    }||};||||int main() {||    Solution solution;||    ||    // Test cases||    vector<int> nums1 = {-2, 1, -3, 4, -1, 2, 1, -5, 4};||    cout << solution.maxSubArray(nums1) << endl; // 6||    ||    vector<int> nums2 = {1};||    cout << solution.maxSubArray(nums2) << endl; // 1||    ||    vector<int> nums3 = {5, 4, -1, 7, 8};||    cout << solution.maxSubArray(nums3) << endl; // 23||    ||    return 0;||}||"
        },
        {
          "language": "python",
          "label": "Python",
          "user_code": "def max_sub_array(nums):||    # Your solution here||    fsdsf||    pass||||# Test cases||print(max_sub_array([-2, 1, -3, 4, -1, 2, 1, -5, 4]))  # 6||print(max_sub_array([1]))  # 1||print(max_sub_array([5, 4, -1, 7, 8]))  # 23||"
        }
      ]
    }
  }
}