{
  "sessionId": "23efa898-207b-4959-a61d-e7d473f25584",
  "startTime": "2025-05-08T09:50:55.472Z",
  "user_submissions": {
    "01": {
      "question_id": "01",
      "question_description": "Write a Java program to find the factorial of a number.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:59:09.358Z",
      "initial_templates": {
        "language": "java",
        "label": "Java",
        "starter": "public class Main {||  public static void main(String[] args) {||    // Write your code here to find factorial||    int number = 5;||    ||    ||  }||}"
      },
      "user_code_submission": {
        "language": "java",
        "label": "Java",
        "user_code": "public class Main {||  public static void main(String[] args) {||    // Write your code here to find factorial||    int number = 5;||    int ans =1;||    for (int i = 1; i <= number; i++) {||                ans *= i;||            }||            return ans;||    ||  }||}"
      }
    },
    "02": {
      "question_id": "02",
      "question_description": "Create a simple HTML form with validation for email and password.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:59:09.358Z",
      "initial_templates": {
        "language": "html",
        "label": "Html",
        "starter": "<!DOCTYPE html>||<html lang=\"en\">||<head>||  <meta charset=\"UTF-8\">||  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">||  <title>Form Validation</title>||  <style>||    /* Add your CSS here */||  </style>||</head>||<body>||  <!-- Create your form with validation here -->||  ||  <script>||    // Add your validation script here||  </script>||</body>||</html>"
      },
      "user_code_submission": {
        "language": "html",
        "label": "Html",
        "user_code": "<!DOCTYPE html>||<html lang=\"en\">||<head>||  <meta charset=\"UTF-8\">||  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">||  <title>Form Validation</title>||  <style>||    body {||      font-family: Arial, sans-serif;||      padding: 20px;||    }||    form {||      max-width: 300px;||      margin: auto;||    }||    label {||      display: block;||      margin-top: 10px;||    }||    input {||      width: 100%;||      padding: 8px;||      margin-top: 5px;||    }||    .error {||      color: red;||      font-size: 0.9em;||    }||  </style>||</head>||<body>||  <form id=\"loginForm\" onsubmit=\"return validateForm()\">||    <h2>Login</h2>||    ||    <label for=\"email\">Email:</label>||    <input type=\"email\" id=\"email\" name=\"email\" required>||    <div id=\"emailError\" class=\"error\"></div>||||    <label for=\"password\">Password:</label>||    <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"6\">||    <div id=\"passwordError\" class=\"error\"></div>||||    <button type=\"submit\">Submit</button>||  </form>||||  <script>||    function validateForm() {||      let isValid = true;||||      const email = document.getElementById('email').value;||      const password = document.getElementById('password').value;||||      const emailError = document.getElementById('emailError');||      const passwordError = document.getElementById('passwordError');||||      emailError.textContent = '';||      passwordError.textContent = '';||||      // Basic email format check||      const emailPattern = /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/;||      if (!emailPattern.test(email)) {||        emailError.textContent = 'Please enter a valid email address.';||        isValid = false;||      }||||      // Password length check||      if (password.length < 6) {||        passwordError.textContent = 'Password must be at least 6 characters.';||        isValid = false;||      }||||      return isValid;||    }||  </script>||</body>||</html>||"
      }
    },
    "03": {
      "question_id": "03",
      "question_description": "Implement a binary search algorithm in C++.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:59:09.358Z",
      "initial_templates": {
        "language": "cpp",
        "label": "Cpp",
        "starter": "#include <iostream>||#include <vector>||using namespace std;||||// Implement binary search function here||int binarySearch(vector<int>& arr, int target) {||  // Write your code here||  ||  ||}||||int main() {||  vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};||  int target = 7;||  ||  int result = binarySearch(arr, target);||  ||  if (result != -1) {||    cout << \"Element found at index \" << result << endl;||  } else {||    cout << \"Element not found in the array\" << endl;||  }||  ||  return 0;||}"
      },
      "user_code_submission": {
        "language": "cpp",
        "label": "Cpp",
        "user_code": "#include <iostream>||#include <vector>||using namespace std;||||// Implement binary search function here||int binarySearch(vector<int>& arr, int target) {||  int left = 0;||  int right = arr.size() - 1;||||  while (left <= right) {||    int mid = left + (right - left) / 2;||||    if (arr[mid] == target) {||      return mid;||    } else if (arr[mid] < target) {||      left = mid + 1;||    } else {||      right = mid - 1;||    }||  }||||  return -1; // Element not found||}||||||int main() {||  vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};||  int target = 7;||  ||  int result = binarySearch(arr, target);||  ||  if (result != -1) {||    cout << \"Element found at index \" << result << endl;||  } else {||    cout << \"Element not found in the array\" << endl;||  }||  ||  return 0;||}"
      }
    },
    "04": {
      "question_id": "04",
      "question_description": "Implement a Linked List data structure with methods to add, remove, and find elements.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:59:09.359Z",
      "initial_templates": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "starter": "class Node {||  constructor(value) {||    this.value = value;||    this.next = null;||  }||}||||class LinkedList {||  constructor() {||    this.head = null;||    this.size = 0;||  }||  ||  // Add a new node to the end of the list||  append(value) {||    // Your code here||  }||  ||  // Add a new node to the beginning of the list||  prepend(value) {||    // Your code here||  }||  ||  // Remove a node with the given value||  remove(value) {||    // Your code here||  }||  ||  // Find a node with the given value||  find(value) {||    // Your code here||  }||  ||  // Helper method to print the list||  printList() {||    let current = this.head;||    let result = \"\";||    while (current) {||      result += current.value + \" -> \";||      current = current.next;||    }||    result += \"null\";||    console.log(result);||  }||}||||// Test your implementation||const list = new LinkedList();||list.append(1);||list.append(2);||list.append(3);||list.prepend(0);||list.printList(); // Should print: 0 -> 1 -> 2 -> 3 -> null||list.remove(2);||list.printList(); // Should print: 0 -> 1 -> 3 -> null||console.log(list.find(1)); // Should return the node with value 1||console.log(list.find(5)); // Should return null||"
        },
        {
          "language": "python",
          "label": "Python",
          "starter": "class Node:||    def __init__(self, value):||        self.value = value||        self.next = None||||class LinkedList:||    def __init__(self):||        self.head = None||        self.size = 0||    ||    # Add a new node to the end of the list||    def append(self, value):||        # Your code here||        pass||    ||    # Add a new node to the beginning of the list||    def prepend(self, value):||        # Your code here||        pass||    ||    # Remove a node with the given value||    def remove(self, value):||        # Your code here||        pass||    ||    # Find a node with the given value||    def find(self, value):||        # Your code here||        pass||    ||    # Helper method to print the list||    def print_list(self):||        current = self.head||        result = \"\"||        while current:||            result += str(current.value) + \" -> \"||            current = current.next||        result += \"None\"||        print(result)||||# Test your implementation||list = LinkedList()||list.append(1)||list.append(2)||list.append(3)||list.prepend(0)||list.print_list()  # Should print: 0 -> 1 -> 2 -> 3 -> None||list.remove(2)||list.print_list()  # Should print: 0 -> 1 -> 3 -> None||print(list.find(1))  # Should return the node with value 1||print(list.find(5))  # Should return None||"
        },
        {
          "language": "cpp",
          "label": "C++",
          "starter": "#include <iostream>||using namespace std;||||class Node {||public:||    int value;||    Node* next;||    ||    Node(int val) : value(val), next(nullptr) {}||};||||class LinkedList {||private:||    Node* head;||    int size;||    ||public:||    LinkedList() : head(nullptr), size(0) {}||    ||    // Add a new node to the end of the list||    void append(int value) {||        // Your code here||    }||    ||    // Add a new node to the beginning of the list||    void prepend(int value) {||        // Your code here||    }||    ||    // Remove a node with the given value||    void remove(int value) {||        // Your code here||    }||    ||    // Find a node with the given value||    Node* find(int value) {||        // Your code here||        return nullptr;||    }||    ||    // Helper method to print the list||    void printList() {||        Node* current = head;||        while (current) {||            cout << current->value << \" -> \";||            current = current->next;||        }||        cout << \"nullptr\" << endl;||    }||};||||int main() {||    LinkedList list;||    list.append(1);||    list.append(2);||    list.append(3);||    list.prepend(0);||    list.printList(); // Should print: 0 -> 1 -> 2 -> 3 -> nullptr||    list.remove(2);||    list.printList(); // Should print: 0 -> 1 -> 3 -> nullptr||    ||    Node* found = list.find(1);||    if (found) {||        cout << \"Found node with value: \" << found->value << endl;||    }||    ||    found = list.find(5);||    if (!found) {||        cout << \"Node with value 5 not found\" << endl;||    }||    ||    return 0;||}||"
        }
      ],
      "user_code_submission": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "user_code": "class Node {||  constructor(value) {||    this.value = value;||    this.next = null;||  }||}||||class LinkedList {||  constructor() {||    this.head = null;||    this.size = 0;||  }||||  append(value) {||    const newNode = new Node(value);||    if (!this.head) {||      this.head = newNode;||    } else {||      let current = this.head;||      while (current.next) {||        current = current.next;||      }||      current.next = newNode;||    }||    this.size++;||  }||||  prepend(value) {||    const newNode = new Node(value);||    newNode.next = this.head;||    this.head = newNode;||    this.size++;||  }||||  remove(value) {||    if (!this.head) return;||||    if (this.head.value === value) {||      this.head = this.head.next;||      this.size--;||      return;||    }||||    let current = this.head;||    while (current.next && current.next.value !== value) {||      current = current.next;||    }||||    if (current.next) {||      current.next = current.next.next;||      this.size--;||    }||  }||||  find(value) {||    let current = this.head;||    while (current) {||      if (current.value === value) return current;||      current = current.next;||    }||    return null;||  }||||  printList() {||    let current = this.head;||    let result = \"\";||    while (current) {||      result += current.value + \" -> \";||      current = current.next;||    }||    result += \"null\";||    console.log(result);||  }||}||||// Test||const list = new LinkedList();||list.append(1);||list.append(2);||list.append(3);||list.prepend(0);||list.printList(); // 0 -> 1 -> 2 -> 3 -> null||list.remove(2);||list.printList(); // 0 -> 1 -> 3 -> null||console.log(list.find(1)); // Node { value: 1, next: Node }||console.log(list.find(5)); // null||"
        },
        {
          "language": "python",
          "label": "Python",
          "user_code": "class Node:||    def __init__(self, value):||        self.value = value||        self.next = None||||class LinkedList:||    def __init__(self):||        self.head = None||        self.size = 0||||    def append(self, value):||        new_node = Node(value)||        if not self.head:||            self.head = new_node||        else:||            current = self.head||            while current.next:||                current = current.next||            current.next = new_node||        self.size += 1||||    def prepend(self, value):||        new_node = Node(value)||        new_node.next = self.head||        self.head = new_node||        self.size += 1||||    def remove(self, value):||        if not self.head:||            return||||        if self.head.value == value:||            self.head = self.head.next||            self.size -= 1||            return||||        current = self.head||        while current.next and current.next.value != value:||            current = current.next||||        if current.next:||            current.next = current.next.next||            self.size -= 1||||    def find(self, value):||        current = self.head||        while current:||            if current.value == value:||                return current||            current = current.next||        return None||||    def print_list(self):||        current = self.head||        result = \"\"||        while current:||            result += str(current.value) + \" -> \"||            current = current.next||        result += \"None\"||        print(result)||||# Test||list = LinkedList()||list.append(1)||list.append(2)||list.append(3)||list.prepend(0)||list.print_list()  # 0 -> 1 -> 2 -> 3 -> None||list.remove(2)||list.print_list()  # 0 -> 1 -> 3 -> None||print(list.find(1))  # <__main__.Node object at ...>||print(list.find(5))  # None||"
        },
        {
          "language": "cpp",
          "label": "C++",
          "user_code": "#include <iostream>||using namespace std;||||class Node {||public:||    int value;||    Node* next;||    ||    Node(int val) : value(val), next(nullptr) {}||};||||class LinkedList {||private:||    Node* head;||    int size;||    ||public:||    LinkedList() : head(nullptr), size(0) {}||    ||    // Add a new node to the end of the list||    void append(int value) {||        // Your code here||    }||    ||    // Add a new node to the beginning of the list||    void prepend(int value) {||        // Your code here||    }||    ||    // Remove a node with the given value||    void remove(int value) {||        // Your code here||    }||    ||    // Find a node with the given value||    Node* find(int value) {||        // Your code here||        return nullptr;||    }||    ||    // Helper method to print the list||    void printList() {||        Node* current = head;||        while (current) {||            cout << current->value << \" -> \";||            current = current->next;||        }||        cout << \"nullptr\" << endl;||    }||};||||int main() {||    LinkedList list;||    list.append(1);||    list.append(2);||    list.append(3);||    list.prepend(0);||    list.printList(); // Should print: 0 -> 1 -> 2 -> 3 -> nullptr||    list.remove(2);||    list.printList(); // Should print: 0 -> 1 -> 3 -> nullptr||    ||    Node* found = list.find(1);||    if (found) {||        cout << \"Found node with value: \" << found->value << endl;||    }||    ||    found = list.find(5);||    if (!found) {||        cout << \"Node with value 5 not found\" << endl;||    }||    ||    return 0;||}||"
        }
      ]
    },
    "05": {
      "question_id": "05",
      "question_description": "Implement a solution for the 'Valid Parentheses' problem: Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets, and open brackets are closed in the correct order.",
      "user_content": "",
      "isSubmitted": true,
      "submittedAt": "2025-05-08T09:59:09.359Z",
      "initial_templates": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "starter": "/**|| * @param {string} s|| * @return {boolean}|| */||function isValid(s) {||  // Your solution here||  ||}||||// Test cases||console.log(isValid(\"()\")); // true||console.log(isValid(\"()[]{}\")); // true||console.log(isValid(\"(]\")); // false||console.log(isValid(\"([)]\")); // false||console.log(isValid(\"{[]}\")); // true||"
        },
        {
          "language": "python",
          "label": "Python",
          "starter": "def is_valid(s):||    # Your solution here||    pass||||# Test cases||print(is_valid(\"()\"))        # True||print(is_valid(\"()[]{}\"))    # True||print(is_valid(\"(]\"))        # False||print(is_valid(\"([)]\"))      # False||print(is_valid(\"{[]}\"))      # True||"
        }
      ],
      "user_code_submission": [
        {
          "language": "javascript",
          "label": "JavaScript",
          "user_code": "/**|| * @param {string} s|| * @return {boolean}|| */||function isValid(s) {||  const stack = [];||  const map = {||    ')': '(',||    '}': '{',||    ']': '['||  };||||  for (let char of s) {||    if (char === '(' || char === '{' || char === '[') {||      stack.push(char);||    } else {||      if (stack.pop() !== map[char]) {||        return false;||      }||    }||  }||||  return stack.length === 0;||}||||// Test cases||console.log(isValid(\"()\"));       // true||console.log(isValid(\"()[]{}\"));   // true||console.log(isValid(\"(]\"));       // false||console.log(isValid(\"([)]\"));     // false||console.log(isValid(\"{[]}\"));     // true||"
        },
        {
          "language": "python",
          "label": "Python",
          "user_code": "def is_valid(s):||    return len(s) % 2 == 0||||# Test cases||print(is_valid(\"()\"))        ||print(is_valid(\"()[]{}\"))    ||print(is_valid(\"(]\"))        ||print(is_valid(\"([)]\"))      ||print(is_valid(\"{[]}\"))      ||"
        }
      ]
    }
  }
}